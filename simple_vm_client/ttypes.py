#
# Autogenerated by Thrift Compiler (0.22.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys

from thrift.protocol.TProtocol import TProtocolException
from thrift.Thrift import TException, TType
from thrift.transport import TTransport
from thrift.TRecursive import fix_spec

all_structs = []


class MetadataUser(object):
    """
    Attributes:
     - user_id
     - public_keys
     - unix_name

    """

    thrift_spec = None

    def __init__(
        self,
        user_id=None,
        public_keys=None,
        unix_name=None,
    ):
        self.user_id = user_id
        self.public_keys = public_keys
        self.unix_name = unix_name

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.user_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.public_keys = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = (
                            iprot.readString().decode("utf-8", errors="replace")
                            if sys.version_info[0] == 2
                            else iprot.readString()
                        )
                        self.public_keys.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.unix_name = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("MetadataUser")
        if self.user_id is not None:
            oprot.writeFieldBegin("user_id", TType.STRING, 1)
            oprot.writeString(
                self.user_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.user_id
            )
            oprot.writeFieldEnd()
        if self.public_keys is not None:
            oprot.writeFieldBegin("public_keys", TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.public_keys))
            for iter6 in self.public_keys:
                oprot.writeString(
                    iter6.encode("utf-8") if sys.version_info[0] == 2 else iter6
                )
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.unix_name is not None:
            oprot.writeFieldBegin("unix_name", TType.STRING, 3)
            oprot.writeString(
                self.unix_name.encode("utf-8")
                if sys.version_info[0] == 2
                else self.unix_name
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.user_id is None:
            raise TProtocolException(message="Required field user_id is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MetadataUserData(object):
    """
    Attributes:
     - data

    """

    thrift_spec = None

    def __init__(
        self,
        data={},
    ):
        if data is self.thrift_spec[2][4]:
            data = {}
        self.data = data

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.MAP:
                    self.data = {}
                    (_ktype8, _vtype9, _size7) = iprot.readMapBegin()
                    for _i11 in range(_size7):
                        _key12 = (
                            iprot.readString().decode("utf-8", errors="replace")
                            if sys.version_info[0] == 2
                            else iprot.readString()
                        )
                        _val13 = MetadataUser()
                        _val13.read(iprot)
                        self.data[_key12] = _val13
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("MetadataUserData")
        if self.data is not None:
            oprot.writeFieldBegin("data", TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.data))
            for kiter14, viter15 in self.data.items():
                oprot.writeString(
                    kiter14.encode("utf-8") if sys.version_info[0] == 2 else kiter14
                )
                viter15.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.data is None:
            raise TProtocolException(message="Required field data is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VirtualMachineServerMetadata(object):
    """
    Attributes:
     - ip
     - hashed_auth_token
     - userdata

    """

    thrift_spec = None

    def __init__(
        self,
        ip=None,
        hashed_auth_token=None,
        userdata=None,
    ):
        self.ip = ip
        self.hashed_auth_token = hashed_auth_token
        self.userdata = userdata

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ip = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hashed_auth_token = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.userdata = MetadataUserData()
                    self.userdata.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("VirtualMachineServerMetadata")
        if self.ip is not None:
            oprot.writeFieldBegin("ip", TType.STRING, 1)
            oprot.writeString(
                self.ip.encode("utf-8") if sys.version_info[0] == 2 else self.ip
            )
            oprot.writeFieldEnd()
        if self.hashed_auth_token is not None:
            oprot.writeFieldBegin("hashed_auth_token", TType.STRING, 2)
            oprot.writeString(
                self.hashed_auth_token.encode("utf-8")
                if sys.version_info[0] == 2
                else self.hashed_auth_token
            )
            oprot.writeFieldEnd()
        if self.userdata is not None:
            oprot.writeFieldBegin("userdata", TType.STRUCT, 3)
            self.userdata.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ip is None:
            raise TProtocolException(message="Required field ip is unset!")
        if self.hashed_auth_token is None:
            raise TProtocolException(
                message="Required field hashed_auth_token is unset!"
            )
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Backend(object):
    """
    Attributes:
     - id
     - owner
     - location_url
     - template
     - template_version

    """

    thrift_spec = None

    def __init__(
        self,
        id=None,
        owner=None,
        location_url=None,
        template=None,
        template_version=None,
    ):
        self.id = id
        self.owner = owner
        self.location_url = location_url
        self.template = template
        self.template_version = template_version

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.owner = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.location_url = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.template = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.template_version = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Backend")
        if self.id is not None:
            oprot.writeFieldBegin("id", TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.owner is not None:
            oprot.writeFieldBegin("owner", TType.STRING, 2)
            oprot.writeString(
                self.owner.encode("utf-8") if sys.version_info[0] == 2 else self.owner
            )
            oprot.writeFieldEnd()
        if self.location_url is not None:
            oprot.writeFieldBegin("location_url", TType.STRING, 3)
            oprot.writeString(
                self.location_url.encode("utf-8")
                if sys.version_info[0] == 2
                else self.location_url
            )
            oprot.writeFieldEnd()
        if self.template is not None:
            oprot.writeFieldBegin("template", TType.STRING, 4)
            oprot.writeString(
                self.template.encode("utf-8")
                if sys.version_info[0] == 2
                else self.template
            )
            oprot.writeFieldEnd()
        if self.template_version is not None:
            oprot.writeFieldBegin("template_version", TType.STRING, 5)
            oprot.writeString(
                self.template_version.encode("utf-8")
                if sys.version_info[0] == 2
                else self.template_version
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ResearchEnvironmentTemplate(object):
    """
    Attributes:
     - template_name
     - title
     - description
     - logo_url
     - info_url
     - port
     - incompatible_versions
     - is_maintained
     - information_for_display
     - min_ram
     - min_cores
     - securitygroup_name

    """

    thrift_spec = None

    def __init__(
        self,
        template_name=None,
        title=None,
        description=None,
        logo_url=None,
        info_url=None,
        port=None,
        incompatible_versions=None,
        is_maintained=None,
        information_for_display=None,
        min_ram=0,
        min_cores=0,
        securitygroup_name=None,
    ):
        self.template_name = template_name
        self.title = title
        self.description = description
        self.logo_url = logo_url
        self.info_url = info_url
        self.port = port
        self.incompatible_versions = incompatible_versions
        self.is_maintained = is_maintained
        self.information_for_display = information_for_display
        if min_ram is self.thrift_spec[10][4]:
            min_ram = 0
        self.min_ram = min_ram
        if min_cores is self.thrift_spec[11][4]:
            min_cores = 0
        self.min_cores = min_cores
        self.securitygroup_name = securitygroup_name

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.template_name = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.logo_url = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.info_url = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.incompatible_versions = []
                    (_etype19, _size16) = iprot.readListBegin()
                    for _i20 in range(_size16):
                        _elem21 = (
                            iprot.readString().decode("utf-8", errors="replace")
                            if sys.version_info[0] == 2
                            else iprot.readString()
                        )
                        self.incompatible_versions.append(_elem21)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.is_maintained = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.information_for_display = {}
                    (_ktype23, _vtype24, _size22) = iprot.readMapBegin()
                    for _i26 in range(_size22):
                        _key27 = (
                            iprot.readString().decode("utf-8", errors="replace")
                            if sys.version_info[0] == 2
                            else iprot.readString()
                        )
                        _val28 = (
                            iprot.readString().decode("utf-8", errors="replace")
                            if sys.version_info[0] == 2
                            else iprot.readString()
                        )
                        self.information_for_display[_key27] = _val28
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.min_ram = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.min_cores = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.securitygroup_name = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("ResearchEnvironmentTemplate")
        if self.template_name is not None:
            oprot.writeFieldBegin("template_name", TType.STRING, 1)
            oprot.writeString(
                self.template_name.encode("utf-8")
                if sys.version_info[0] == 2
                else self.template_name
            )
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin("title", TType.STRING, 2)
            oprot.writeString(
                self.title.encode("utf-8") if sys.version_info[0] == 2 else self.title
            )
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin("description", TType.STRING, 3)
            oprot.writeString(
                self.description.encode("utf-8")
                if sys.version_info[0] == 2
                else self.description
            )
            oprot.writeFieldEnd()
        if self.logo_url is not None:
            oprot.writeFieldBegin("logo_url", TType.STRING, 4)
            oprot.writeString(
                self.logo_url.encode("utf-8")
                if sys.version_info[0] == 2
                else self.logo_url
            )
            oprot.writeFieldEnd()
        if self.info_url is not None:
            oprot.writeFieldBegin("info_url", TType.STRING, 5)
            oprot.writeString(
                self.info_url.encode("utf-8")
                if sys.version_info[0] == 2
                else self.info_url
            )
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin("port", TType.I32, 6)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.incompatible_versions is not None:
            oprot.writeFieldBegin("incompatible_versions", TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.incompatible_versions))
            for iter29 in self.incompatible_versions:
                oprot.writeString(
                    iter29.encode("utf-8") if sys.version_info[0] == 2 else iter29
                )
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.is_maintained is not None:
            oprot.writeFieldBegin("is_maintained", TType.BOOL, 8)
            oprot.writeBool(self.is_maintained)
            oprot.writeFieldEnd()
        if self.information_for_display is not None:
            oprot.writeFieldBegin("information_for_display", TType.MAP, 9)
            oprot.writeMapBegin(
                TType.STRING, TType.STRING, len(self.information_for_display)
            )
            for kiter30, viter31 in self.information_for_display.items():
                oprot.writeString(
                    kiter30.encode("utf-8") if sys.version_info[0] == 2 else kiter30
                )
                oprot.writeString(
                    viter31.encode("utf-8") if sys.version_info[0] == 2 else viter31
                )
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.min_ram is not None:
            oprot.writeFieldBegin("min_ram", TType.I32, 10)
            oprot.writeI32(self.min_ram)
            oprot.writeFieldEnd()
        if self.min_cores is not None:
            oprot.writeFieldBegin("min_cores", TType.I32, 11)
            oprot.writeI32(self.min_cores)
            oprot.writeFieldEnd()
        if self.securitygroup_name is not None:
            oprot.writeFieldBegin("securitygroup_name", TType.STRING, 12)
            oprot.writeString(
                self.securitygroup_name.encode("utf-8")
                if sys.version_info[0] == 2
                else self.securitygroup_name
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CondaPackage(object):
    """
    Attributes:
     - build
     - build_number
     - name
     - version
     - home

    """

    thrift_spec = None

    def __init__(
        self,
        build=None,
        build_number=None,
        name=None,
        version=None,
        home=None,
    ):
        self.build = build
        self.build_number = build_number
        self.name = name
        self.version = version
        self.home = home

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.build = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.build_number = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.version = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.home = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("CondaPackage")
        if self.build is not None:
            oprot.writeFieldBegin("build", TType.STRING, 1)
            oprot.writeString(
                self.build.encode("utf-8") if sys.version_info[0] == 2 else self.build
            )
            oprot.writeFieldEnd()
        if self.build_number is not None:
            oprot.writeFieldBegin("build_number", TType.STRING, 2)
            oprot.writeString(
                self.build_number.encode("utf-8")
                if sys.version_info[0] == 2
                else self.build_number
            )
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin("name", TType.STRING, 3)
            oprot.writeString(
                self.name.encode("utf-8") if sys.version_info[0] == 2 else self.name
            )
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin("version", TType.STRING, 4)
            oprot.writeString(
                self.version.encode("utf-8")
                if sys.version_info[0] == 2
                else self.version
            )
            oprot.writeFieldEnd()
        if self.home is not None:
            oprot.writeFieldBegin("home", TType.STRING, 5)
            oprot.writeString(
                self.home.encode("utf-8") if sys.version_info[0] == 2 else self.home
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Volume(object):
    """
    Attributes:
     - id
     - name
     - description
     - status
     - created_at
     - device
     - size
     - server_id

    """

    thrift_spec = None

    def __init__(
        self,
        id=None,
        name=None,
        description=None,
        status=None,
        created_at=None,
        device=None,
        size=None,
        server_id=None,
    ):
        self.id = id
        self.name = name
        self.description = description
        self.status = status
        self.created_at = created_at
        self.device = device
        self.size = size
        self.server_id = server_id

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.status = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.created_at = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.device = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.server_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Volume")
        if self.id is not None:
            oprot.writeFieldBegin("id", TType.STRING, 1)
            oprot.writeString(
                self.id.encode("utf-8") if sys.version_info[0] == 2 else self.id
            )
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin("name", TType.STRING, 2)
            oprot.writeString(
                self.name.encode("utf-8") if sys.version_info[0] == 2 else self.name
            )
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin("description", TType.STRING, 3)
            oprot.writeString(
                self.description.encode("utf-8")
                if sys.version_info[0] == 2
                else self.description
            )
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin("status", TType.STRING, 4)
            oprot.writeString(
                self.status.encode("utf-8") if sys.version_info[0] == 2 else self.status
            )
            oprot.writeFieldEnd()
        if self.created_at is not None:
            oprot.writeFieldBegin("created_at", TType.STRING, 5)
            oprot.writeString(
                self.created_at.encode("utf-8")
                if sys.version_info[0] == 2
                else self.created_at
            )
            oprot.writeFieldEnd()
        if self.device is not None:
            oprot.writeFieldBegin("device", TType.STRING, 6)
            oprot.writeString(
                self.device.encode("utf-8") if sys.version_info[0] == 2 else self.device
            )
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin("size", TType.I32, 7)
            oprot.writeI32(self.size)
            oprot.writeFieldEnd()
        if self.server_id is not None:
            oprot.writeFieldBegin("server_id", TType.STRING, 8)
            oprot.writeString(
                self.server_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.server_id
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Snapshot(object):
    """
    This Struct defines a volume Snapshot.

    Attributes:
     - id: The OpenStack ID of the snapshot
     - name: The name of the snapshot
     - description: The description of the snapshot
     - status: The status of the snapshot
     - created_at: The time the snapshot was created
     - size: The size in GB of the snapshot
     - volume_id: The OpenStack id of the snapshot source volume

    """

    thrift_spec = None

    def __init__(
        self,
        id=None,
        name=None,
        description=None,
        status=None,
        created_at=None,
        size=None,
        volume_id=None,
    ):
        self.id = id
        self.name = name
        self.description = description
        self.status = status
        self.created_at = created_at
        self.size = size
        self.volume_id = volume_id

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.status = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.created_at = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.volume_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Snapshot")
        if self.id is not None:
            oprot.writeFieldBegin("id", TType.STRING, 1)
            oprot.writeString(
                self.id.encode("utf-8") if sys.version_info[0] == 2 else self.id
            )
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin("name", TType.STRING, 2)
            oprot.writeString(
                self.name.encode("utf-8") if sys.version_info[0] == 2 else self.name
            )
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin("description", TType.STRING, 3)
            oprot.writeString(
                self.description.encode("utf-8")
                if sys.version_info[0] == 2
                else self.description
            )
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin("status", TType.STRING, 4)
            oprot.writeString(
                self.status.encode("utf-8") if sys.version_info[0] == 2 else self.status
            )
            oprot.writeFieldEnd()
        if self.created_at is not None:
            oprot.writeFieldBegin("created_at", TType.STRING, 5)
            oprot.writeString(
                self.created_at.encode("utf-8")
                if sys.version_info[0] == 2
                else self.created_at
            )
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin("size", TType.I32, 6)
            oprot.writeI32(self.size)
            oprot.writeFieldEnd()
        if self.volume_id is not None:
            oprot.writeFieldBegin("volume_id", TType.STRING, 7)
            oprot.writeString(
                self.volume_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.volume_id
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Flavor(object):
    """
    This Struct defines a Flavor.

    Attributes:
     - vcpus: The vcpus of the flavor
     - ram: The ram of the flavor
     - disk: The disk of the flavor
     - name: The name of the flavor
     - description: The description of the flavor
     - ephemeral_disk: The ephemeral disk space of the flavor

    """

    thrift_spec = None

    def __init__(
        self,
        vcpus=None,
        ram=None,
        disk=None,
        name=None,
        description=None,
        ephemeral_disk=None,
    ):
        self.vcpus = vcpus
        self.ram = ram
        self.disk = disk
        self.name = name
        self.description = description
        self.ephemeral_disk = ephemeral_disk

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.vcpus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.ram = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.disk = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.name = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.description = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.ephemeral_disk = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Flavor")
        if self.vcpus is not None:
            oprot.writeFieldBegin("vcpus", TType.I32, 1)
            oprot.writeI32(self.vcpus)
            oprot.writeFieldEnd()
        if self.ram is not None:
            oprot.writeFieldBegin("ram", TType.I32, 2)
            oprot.writeI32(self.ram)
            oprot.writeFieldEnd()
        if self.disk is not None:
            oprot.writeFieldBegin("disk", TType.I32, 3)
            oprot.writeI32(self.disk)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin("name", TType.STRING, 4)
            oprot.writeString(
                self.name.encode("utf-8") if sys.version_info[0] == 2 else self.name
            )
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin("description", TType.STRING, 5)
            oprot.writeString(
                self.description.encode("utf-8")
                if sys.version_info[0] == 2
                else self.description
            )
            oprot.writeFieldEnd()
        if self.ephemeral_disk is not None:
            oprot.writeFieldBegin("ephemeral_disk", TType.I32, 6)
            oprot.writeI32(self.ephemeral_disk)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.vcpus is None:
            raise TProtocolException(message="Required field vcpus is unset!")
        if self.ram is None:
            raise TProtocolException(message="Required field ram is unset!")
        if self.disk is None:
            raise TProtocolException(message="Required field disk is unset!")
        if self.name is None:
            raise TProtocolException(message="Required field name is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Image(object):
    """
    This Struct defines an Image.

    Attributes:
     - name: The name of the image
     - min_disk: The min_diks of the image
     - min_ram: The min_ram of the image
     - status: The status of the image
     - created_at: The creation time of the image
     - updated_at: The updated time of the image
     - openstack_id: The openstack_id the image
     - description: The description of the image
     - tags: List of tags from image
     - is_snapshot: If the Image is a snapshot
     - os_version: OS version of the image
     - os_distro: OS distro of the image
     - title: Title of the image
     - slurm_version

    """

    thrift_spec = None

    def __init__(
        self,
        name=None,
        min_disk=None,
        min_ram=None,
        status=None,
        created_at=None,
        updated_at=None,
        openstack_id=None,
        description=None,
        tags=None,
        is_snapshot=None,
        os_version=None,
        os_distro=None,
        title=None,
        slurm_version=None,
    ):
        self.name = name
        self.min_disk = min_disk
        self.min_ram = min_ram
        self.status = status
        self.created_at = created_at
        self.updated_at = updated_at
        self.openstack_id = openstack_id
        self.description = description
        self.tags = tags
        self.is_snapshot = is_snapshot
        self.os_version = os_version
        self.os_distro = os_distro
        self.title = title
        self.slurm_version = slurm_version

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.min_disk = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.min_ram = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.status = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.created_at = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.updated_at = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.openstack_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.description = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.tags = []
                    (_etype35, _size32) = iprot.readListBegin()
                    for _i36 in range(_size32):
                        _elem37 = (
                            iprot.readString().decode("utf-8", errors="replace")
                            if sys.version_info[0] == 2
                            else iprot.readString()
                        )
                        self.tags.append(_elem37)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.is_snapshot = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.os_version = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.os_distro = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.title = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.slurm_version = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Image")
        if self.name is not None:
            oprot.writeFieldBegin("name", TType.STRING, 1)
            oprot.writeString(
                self.name.encode("utf-8") if sys.version_info[0] == 2 else self.name
            )
            oprot.writeFieldEnd()
        if self.min_disk is not None:
            oprot.writeFieldBegin("min_disk", TType.I32, 2)
            oprot.writeI32(self.min_disk)
            oprot.writeFieldEnd()
        if self.min_ram is not None:
            oprot.writeFieldBegin("min_ram", TType.I32, 3)
            oprot.writeI32(self.min_ram)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin("status", TType.STRING, 4)
            oprot.writeString(
                self.status.encode("utf-8") if sys.version_info[0] == 2 else self.status
            )
            oprot.writeFieldEnd()
        if self.created_at is not None:
            oprot.writeFieldBegin("created_at", TType.STRING, 5)
            oprot.writeString(
                self.created_at.encode("utf-8")
                if sys.version_info[0] == 2
                else self.created_at
            )
            oprot.writeFieldEnd()
        if self.updated_at is not None:
            oprot.writeFieldBegin("updated_at", TType.STRING, 6)
            oprot.writeString(
                self.updated_at.encode("utf-8")
                if sys.version_info[0] == 2
                else self.updated_at
            )
            oprot.writeFieldEnd()
        if self.openstack_id is not None:
            oprot.writeFieldBegin("openstack_id", TType.STRING, 7)
            oprot.writeString(
                self.openstack_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.openstack_id
            )
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin("description", TType.STRING, 8)
            oprot.writeString(
                self.description.encode("utf-8")
                if sys.version_info[0] == 2
                else self.description
            )
            oprot.writeFieldEnd()
        if self.tags is not None:
            oprot.writeFieldBegin("tags", TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.tags))
            for iter38 in self.tags:
                oprot.writeString(
                    iter38.encode("utf-8") if sys.version_info[0] == 2 else iter38
                )
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.is_snapshot is not None:
            oprot.writeFieldBegin("is_snapshot", TType.BOOL, 10)
            oprot.writeBool(self.is_snapshot)
            oprot.writeFieldEnd()
        if self.os_version is not None:
            oprot.writeFieldBegin("os_version", TType.STRING, 11)
            oprot.writeString(
                self.os_version.encode("utf-8")
                if sys.version_info[0] == 2
                else self.os_version
            )
            oprot.writeFieldEnd()
        if self.os_distro is not None:
            oprot.writeFieldBegin("os_distro", TType.STRING, 12)
            oprot.writeString(
                self.os_distro.encode("utf-8")
                if sys.version_info[0] == 2
                else self.os_distro
            )
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin("title", TType.STRING, 13)
            oprot.writeString(
                self.title.encode("utf-8") if sys.version_info[0] == 2 else self.title
            )
            oprot.writeFieldEnd()
        if self.slurm_version is not None:
            oprot.writeFieldBegin("slurm_version", TType.STRING, 14)
            oprot.writeString(
                self.slurm_version.encode("utf-8")
                if sys.version_info[0] == 2
                else self.slurm_version
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message="Required field name is unset!")
        if self.min_disk is None:
            raise TProtocolException(message="Required field min_disk is unset!")
        if self.min_ram is None:
            raise TProtocolException(message="Required field min_ram is unset!")
        if self.status is None:
            raise TProtocolException(message="Required field status is unset!")
        if self.openstack_id is None:
            raise TProtocolException(message="Required field openstack_id is unset!")
        if self.tags is None:
            raise TProtocolException(message="Required field tags is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VM(object):
    """
    This Struct defines a VirtualMachine.

    Attributes:
     - flavor: The flavor of the VM
     - image: The image of the VM
     - metadata: The metadata of the VM
     - project_id: The project_id of the VM
     - keyname: The keyname from the public key of the VM
     - openstack_id: The openstack_id of the VM
     - name: The name of the VM
     - created_at: The the creation time of the VM
     - floating_ip: The floating ip of the VM
     - fixed_ip: The fixed ips of the VM
     - task_state
     - vm_state

    """

    thrift_spec = None

    def __init__(
        self,
        flavor=None,
        image=None,
        metadata=None,
        project_id=None,
        keyname=None,
        openstack_id=None,
        name=None,
        created_at=None,
        floating_ip=None,
        fixed_ip=None,
        task_state=None,
        vm_state=None,
    ):
        self.flavor = flavor
        self.image = image
        self.metadata = metadata
        self.project_id = project_id
        self.keyname = keyname
        self.openstack_id = openstack_id
        self.name = name
        self.created_at = created_at
        self.floating_ip = floating_ip
        self.fixed_ip = fixed_ip
        self.task_state = task_state
        self.vm_state = vm_state

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.flavor = Flavor()
                    self.flavor.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.image = Image()
                    self.image.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.metadata = {}
                    (_ktype40, _vtype41, _size39) = iprot.readMapBegin()
                    for _i43 in range(_size39):
                        _key44 = (
                            iprot.readString().decode("utf-8", errors="replace")
                            if sys.version_info[0] == 2
                            else iprot.readString()
                        )
                        _val45 = (
                            iprot.readString().decode("utf-8", errors="replace")
                            if sys.version_info[0] == 2
                            else iprot.readString()
                        )
                        self.metadata[_key44] = _val45
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.project_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.keyname = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.openstack_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.name = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.created_at = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.floating_ip = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.fixed_ip = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.task_state = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.vm_state = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("VM")
        if self.flavor is not None:
            oprot.writeFieldBegin("flavor", TType.STRUCT, 1)
            self.flavor.write(oprot)
            oprot.writeFieldEnd()
        if self.image is not None:
            oprot.writeFieldBegin("image", TType.STRUCT, 2)
            self.image.write(oprot)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin("metadata", TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metadata))
            for kiter46, viter47 in self.metadata.items():
                oprot.writeString(
                    kiter46.encode("utf-8") if sys.version_info[0] == 2 else kiter46
                )
                oprot.writeString(
                    viter47.encode("utf-8") if sys.version_info[0] == 2 else viter47
                )
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.project_id is not None:
            oprot.writeFieldBegin("project_id", TType.STRING, 4)
            oprot.writeString(
                self.project_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.project_id
            )
            oprot.writeFieldEnd()
        if self.keyname is not None:
            oprot.writeFieldBegin("keyname", TType.STRING, 5)
            oprot.writeString(
                self.keyname.encode("utf-8")
                if sys.version_info[0] == 2
                else self.keyname
            )
            oprot.writeFieldEnd()
        if self.openstack_id is not None:
            oprot.writeFieldBegin("openstack_id", TType.STRING, 6)
            oprot.writeString(
                self.openstack_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.openstack_id
            )
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin("name", TType.STRING, 7)
            oprot.writeString(
                self.name.encode("utf-8") if sys.version_info[0] == 2 else self.name
            )
            oprot.writeFieldEnd()
        if self.created_at is not None:
            oprot.writeFieldBegin("created_at", TType.STRING, 8)
            oprot.writeString(
                self.created_at.encode("utf-8")
                if sys.version_info[0] == 2
                else self.created_at
            )
            oprot.writeFieldEnd()
        if self.floating_ip is not None:
            oprot.writeFieldBegin("floating_ip", TType.STRING, 9)
            oprot.writeString(
                self.floating_ip.encode("utf-8")
                if sys.version_info[0] == 2
                else self.floating_ip
            )
            oprot.writeFieldEnd()
        if self.fixed_ip is not None:
            oprot.writeFieldBegin("fixed_ip", TType.STRING, 10)
            oprot.writeString(
                self.fixed_ip.encode("utf-8")
                if sys.version_info[0] == 2
                else self.fixed_ip
            )
            oprot.writeFieldEnd()
        if self.task_state is not None:
            oprot.writeFieldBegin("task_state", TType.STRING, 11)
            oprot.writeString(
                self.task_state.encode("utf-8")
                if sys.version_info[0] == 2
                else self.task_state
            )
            oprot.writeFieldEnd()
        if self.vm_state is not None:
            oprot.writeFieldBegin("vm_state", TType.STRING, 12)
            oprot.writeString(
                self.vm_state.encode("utf-8")
                if sys.version_info[0] == 2
                else self.vm_state
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.keyname is None:
            raise TProtocolException(message="Required field keyname is unset!")
        if self.openstack_id is None:
            raise TProtocolException(message="Required field openstack_id is unset!")
        if self.name is None:
            raise TProtocolException(message="Required field name is unset!")
        if self.created_at is None:
            raise TProtocolException(message="Required field created_at is unset!")
        if self.fixed_ip is None:
            raise TProtocolException(message="Required field fixed_ip is unset!")
        if self.vm_state is None:
            raise TProtocolException(message="Required field vm_state is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClusterInstanceMetadata(object):
    """
    Attributes:
     - user_id
     - project_id
     - project_name

    """

    thrift_spec = None

    def __init__(
        self,
        user_id=None,
        project_id=None,
        project_name=None,
    ):
        self.user_id = user_id
        self.project_id = project_id
        self.project_name = project_name

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.user_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.project_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.project_name = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("ClusterInstanceMetadata")
        if self.user_id is not None:
            oprot.writeFieldBegin("user_id", TType.STRING, 1)
            oprot.writeString(
                self.user_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.user_id
            )
            oprot.writeFieldEnd()
        if self.project_id is not None:
            oprot.writeFieldBegin("project_id", TType.STRING, 2)
            oprot.writeString(
                self.project_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.project_id
            )
            oprot.writeFieldEnd()
        if self.project_name is not None:
            oprot.writeFieldBegin("project_name", TType.STRING, 3)
            oprot.writeString(
                self.project_name.encode("utf-8")
                if sys.version_info[0] == 2
                else self.project_name
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.user_id is None:
            raise TProtocolException(message="Required field user_id is unset!")
        if self.project_id is None:
            raise TProtocolException(message="Required field project_id is unset!")
        if self.project_name is None:
            raise TProtocolException(message="Required field project_name is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClusterInstance(object):
    """
    Attributes:
     - type
     - image

    """

    thrift_spec = None

    def __init__(
        self,
        type=None,
        image=None,
    ):
        self.type = type
        self.image = image

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.image = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("ClusterInstance")
        if self.type is not None:
            oprot.writeFieldBegin("type", TType.STRING, 1)
            oprot.writeString(
                self.type.encode("utf-8") if sys.version_info[0] == 2 else self.type
            )
            oprot.writeFieldEnd()
        if self.image is not None:
            oprot.writeFieldBegin("image", TType.STRING, 2)
            oprot.writeString(
                self.image.encode("utf-8") if sys.version_info[0] == 2 else self.image
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message="Required field type is unset!")
        if self.image is None:
            raise TProtocolException(message="Required field image is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClusterVolume(object):
    """
    Attributes:
     - openstack_id
     - permanent
     - exists
     - size
     - type

    """

    thrift_spec = None

    def __init__(
        self,
        openstack_id=None,
        permanent=None,
        exists=None,
        size=None,
        type="ext4",
    ):
        self.openstack_id = openstack_id
        self.permanent = permanent
        self.exists = exists
        self.size = size
        self.type = type

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.openstack_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.permanent = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.type = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("ClusterVolume")
        if self.openstack_id is not None:
            oprot.writeFieldBegin("openstack_id", TType.STRING, 1)
            oprot.writeString(
                self.openstack_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.openstack_id
            )
            oprot.writeFieldEnd()
        if self.permanent is not None:
            oprot.writeFieldBegin("permanent", TType.BOOL, 2)
            oprot.writeBool(self.permanent)
            oprot.writeFieldEnd()
        if self.exists is not None:
            oprot.writeFieldBegin("exists", TType.BOOL, 3)
            oprot.writeBool(self.exists)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin("size", TType.I32, 4)
            oprot.writeI32(self.size)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin("type", TType.STRING, 5)
            oprot.writeString(
                self.type.encode("utf-8") if sys.version_info[0] == 2 else self.type
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.openstack_id is None:
            raise TProtocolException(message="Required field openstack_id is unset!")
        if self.permanent is None:
            raise TProtocolException(message="Required field permanent is unset!")
        if self.exists is None:
            raise TProtocolException(message="Required field exists is unset!")
        if self.size is None:
            raise TProtocolException(message="Required field size is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClusterWorker(object):
    """
    Attributes:
     - type
     - image
     - count
     - onDemand

    """

    thrift_spec = None

    def __init__(
        self,
        type=None,
        image=None,
        count=None,
        onDemand=False,
    ):
        self.type = type
        self.image = image
        self.count = count
        self.onDemand = onDemand

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.image = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.onDemand = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("ClusterWorker")
        if self.type is not None:
            oprot.writeFieldBegin("type", TType.STRING, 1)
            oprot.writeString(
                self.type.encode("utf-8") if sys.version_info[0] == 2 else self.type
            )
            oprot.writeFieldEnd()
        if self.image is not None:
            oprot.writeFieldBegin("image", TType.STRING, 2)
            oprot.writeString(
                self.image.encode("utf-8") if sys.version_info[0] == 2 else self.image
            )
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin("count", TType.I32, 3)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.onDemand is not None:
            oprot.writeFieldBegin("onDemand", TType.BOOL, 4)
            oprot.writeBool(self.onDemand)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message="Required field type is unset!")
        if self.image is None:
            raise TProtocolException(message="Required field image is unset!")
        if self.count is None:
            raise TProtocolException(message="Required field count is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClusterMessage(object):
    """
    Attributes:
     - message
     - cluster_id

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
        cluster_id=None,
    ):
        self.message = message
        self.cluster_id = cluster_id

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cluster_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("ClusterMessage")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.cluster_id is not None:
            oprot.writeFieldBegin("cluster_id", TType.STRING, 2)
            oprot.writeString(
                self.cluster_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.cluster_id
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message="Required field message is unset!")
        if self.cluster_id is None:
            raise TProtocolException(message="Required field cluster_id is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClusterInfo(object):
    """
    Attributes:
     - message
     - cluster_id
     - ready

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
        cluster_id=None,
        ready=None,
    ):
        self.message = message
        self.cluster_id = cluster_id
        self.ready = ready

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cluster_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.ready = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("ClusterInfo")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.cluster_id is not None:
            oprot.writeFieldBegin("cluster_id", TType.STRING, 2)
            oprot.writeString(
                self.cluster_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.cluster_id
            )
            oprot.writeFieldEnd()
        if self.ready is not None:
            oprot.writeFieldBegin("ready", TType.BOOL, 3)
            oprot.writeBool(self.ready)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message="Required field message is unset!")
        if self.cluster_id is None:
            raise TProtocolException(message="Required field cluster_id is unset!")
        if self.ready is None:
            raise TProtocolException(message="Required field ready is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClusterState(object):
    """
    Attributes:
     - cluster_id
     - message
     - state
     - ssh_user
     - floating_ip
     - last_changed

    """

    thrift_spec = None

    def __init__(
        self,
        cluster_id=None,
        message=None,
        state=None,
        ssh_user=None,
        floating_ip=None,
        last_changed=None,
    ):
        self.cluster_id = cluster_id
        self.message = message
        self.state = state
        self.ssh_user = ssh_user
        self.floating_ip = floating_ip
        self.last_changed = last_changed

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cluster_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.state = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.ssh_user = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.floating_ip = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.last_changed = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("ClusterState")
        if self.cluster_id is not None:
            oprot.writeFieldBegin("cluster_id", TType.STRING, 1)
            oprot.writeString(
                self.cluster_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.cluster_id
            )
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 2)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin("state", TType.STRING, 3)
            oprot.writeString(
                self.state.encode("utf-8") if sys.version_info[0] == 2 else self.state
            )
            oprot.writeFieldEnd()
        if self.ssh_user is not None:
            oprot.writeFieldBegin("ssh_user", TType.STRING, 4)
            oprot.writeString(
                self.ssh_user.encode("utf-8")
                if sys.version_info[0] == 2
                else self.ssh_user
            )
            oprot.writeFieldEnd()
        if self.floating_ip is not None:
            oprot.writeFieldBegin("floating_ip", TType.STRING, 5)
            oprot.writeString(
                self.floating_ip.encode("utf-8")
                if sys.version_info[0] == 2
                else self.floating_ip
            )
            oprot.writeFieldEnd()
        if self.last_changed is not None:
            oprot.writeFieldBegin("last_changed", TType.STRING, 6)
            oprot.writeString(
                self.last_changed.encode("utf-8")
                if sys.version_info[0] == 2
                else self.last_changed
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.cluster_id is None:
            raise TProtocolException(message="Required field cluster_id is unset!")
        if self.message is None:
            raise TProtocolException(message="Required field message is unset!")
        if self.state is None:
            raise TProtocolException(message="Required field state is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClusterLog(object):
    """
    Attributes:
     - message
     - cluster_id
     - log

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
        cluster_id=None,
        log=None,
    ):
        self.message = message
        self.cluster_id = cluster_id
        self.log = log

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cluster_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.log = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("ClusterLog")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.cluster_id is not None:
            oprot.writeFieldBegin("cluster_id", TType.STRING, 2)
            oprot.writeString(
                self.cluster_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.cluster_id
            )
            oprot.writeFieldEnd()
        if self.log is not None:
            oprot.writeFieldBegin("log", TType.STRING, 3)
            oprot.writeString(
                self.log.encode("utf-8") if sys.version_info[0] == 2 else self.log
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message="Required field message is unset!")
        if self.cluster_id is None:
            raise TProtocolException(message="Required field cluster_id is unset!")
        if self.log is None:
            raise TProtocolException(message="Required field log is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PlaybookResult(object):
    """
    This Struct defines the result of a playbook run.

    Attributes:
     - status: The exit status code of the run
     - stdout: The standard logs of the run
     - stderr: The error logs of the run

    """

    thrift_spec = None

    def __init__(
        self,
        status=None,
        stdout=None,
        stderr=None,
    ):
        self.status = status
        self.stdout = stdout
        self.stderr = stderr

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.stdout = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.stderr = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("PlaybookResult")
        if self.status is not None:
            oprot.writeFieldBegin("status", TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.stdout is not None:
            oprot.writeFieldBegin("stdout", TType.STRING, 2)
            oprot.writeString(
                self.stdout.encode("utf-8") if sys.version_info[0] == 2 else self.stdout
            )
            oprot.writeFieldEnd()
        if self.stderr is not None:
            oprot.writeFieldBegin("stderr", TType.STRING, 3)
            oprot.writeString(
                self.stderr.encode("utf-8") if sys.version_info[0] == 2 else self.stderr
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message="Required field status is unset!")
        if self.stdout is None:
            raise TProtocolException(message="Required field stdout is unset!")
        if self.stderr is None:
            raise TProtocolException(message="Required field stderr is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MetadataServerNotAvailableException(TException):
    """
    Attributes:
     - message

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
    ):
        super(MetadataServerNotAvailableException, self).__setattr__("message", message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message,))

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("MetadataServerNotAvailableException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MetadataServerNotAllowedException(TException):
    """
    Attributes:
     - message

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
    ):
        super(MetadataServerNotAllowedException, self).__setattr__("message", message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message,))

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("MetadataServerNotAllowedException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ResourceNotFoundException(TException):
    """
    Attributes:
     - message: Name already used.
     - resource_type
     - name_or_id

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
        resource_type=None,
        name_or_id=None,
    ):
        super(ResourceNotFoundException, self).__setattr__("message", message)
        super(ResourceNotFoundException, self).__setattr__(
            "resource_type", resource_type
        )
        super(ResourceNotFoundException, self).__setattr__("name_or_id", name_or_id)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash(
            (
                self.message,
                self.resource_type,
                self.name_or_id,
            )
        )

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        resource_type = None
        name_or_id = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    resource_type = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    name_or_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
            resource_type=resource_type,
            name_or_id=name_or_id,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("ResourceNotFoundException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.resource_type is not None:
            oprot.writeFieldBegin("resource_type", TType.STRING, 2)
            oprot.writeString(
                self.resource_type.encode("utf-8")
                if sys.version_info[0] == 2
                else self.resource_type
            )
            oprot.writeFieldEnd()
        if self.name_or_id is not None:
            oprot.writeFieldBegin("name_or_id", TType.STRING, 3)
            oprot.writeString(
                self.name_or_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.name_or_id
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ResourceNotAvailableException(TException):
    """
    Attributes:
     - message: Name already used.

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
    ):
        super(ResourceNotAvailableException, self).__setattr__("message", message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message,))

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("ResourceNotAvailableException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TemplateNotFoundException(TException):
    """
    Attributes:
     - message: Name already used.
     - template

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
        template=None,
    ):
        super(TemplateNotFoundException, self).__setattr__("message", message)
        super(TemplateNotFoundException, self).__setattr__("template", template)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash(
            (
                self.message,
                self.template,
            )
        )

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        template = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    template = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
            template=template,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("TemplateNotFoundException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.template is not None:
            oprot.writeFieldBegin("template", TType.STRING, 2)
            oprot.writeString(
                self.template.encode("utf-8")
                if sys.version_info[0] == 2
                else self.template
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NameAlreadyUsedException(TException):
    """
    Attributes:
     - message: @ Name already used.
     - name

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
        name=None,
    ):
        super(NameAlreadyUsedException, self).__setattr__("message", message)
        super(NameAlreadyUsedException, self).__setattr__("name", name)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash(
            (
                self.message,
                self.name,
            )
        )

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        name = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    name = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
            name=name,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("NameAlreadyUsedException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin("name", TType.STRING, 2)
            oprot.writeString(
                self.name.encode("utf-8") if sys.version_info[0] == 2 else self.name
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServerNotFoundException(TException):
    """
    Attributes:
     - message: Server not found.
     - name_or_id

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
        name_or_id=None,
    ):
        super(ServerNotFoundException, self).__setattr__("message", message)
        super(ServerNotFoundException, self).__setattr__("name_or_id", name_or_id)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash(
            (
                self.message,
                self.name_or_id,
            )
        )

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        name_or_id = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    name_or_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
            name_or_id=name_or_id,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("ServerNotFoundException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.name_or_id is not None:
            oprot.writeFieldBegin("name_or_id", TType.STRING, 2)
            oprot.writeString(
                self.name_or_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.name_or_id
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SecurityGroupNotFoundException(TException):
    """
    Attributes:
     - message: Server not found.
     - name_or_id

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
        name_or_id=None,
    ):
        super(SecurityGroupNotFoundException, self).__setattr__("message", message)
        super(SecurityGroupNotFoundException, self).__setattr__(
            "name_or_id", name_or_id
        )

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash(
            (
                self.message,
                self.name_or_id,
            )
        )

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        name_or_id = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    name_or_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
            name_or_id=name_or_id,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("SecurityGroupNotFoundException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.name_or_id is not None:
            oprot.writeFieldBegin("name_or_id", TType.STRING, 2)
            oprot.writeString(
                self.name_or_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.name_or_id
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SecurityGroupRuleNotFoundException(TException):
    """
    Attributes:
     - message: Server not found.
     - name_or_id

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
        name_or_id=None,
    ):
        super(SecurityGroupRuleNotFoundException, self).__setattr__("message", message)
        super(SecurityGroupRuleNotFoundException, self).__setattr__(
            "name_or_id", name_or_id
        )

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash(
            (
                self.message,
                self.name_or_id,
            )
        )

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        name_or_id = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    name_or_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
            name_or_id=name_or_id,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("SecurityGroupRuleNotFoundException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.name_or_id is not None:
            oprot.writeFieldBegin("name_or_id", TType.STRING, 2)
            oprot.writeString(
                self.name_or_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.name_or_id
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FlavorNotFoundException(TException):
    """
    Attributes:
     - message
     - name_or_id

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
        name_or_id=None,
    ):
        super(FlavorNotFoundException, self).__setattr__("message", message)
        super(FlavorNotFoundException, self).__setattr__("name_or_id", name_or_id)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash(
            (
                self.message,
                self.name_or_id,
            )
        )

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        name_or_id = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    name_or_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
            name_or_id=name_or_id,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("FlavorNotFoundException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.name_or_id is not None:
            oprot.writeFieldBegin("name_or_id", TType.STRING, 2)
            oprot.writeString(
                self.name_or_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.name_or_id
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VolumeNotFoundException(TException):
    """
    Attributes:
     - message
     - name_or_id

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
        name_or_id=None,
    ):
        super(VolumeNotFoundException, self).__setattr__("message", message)
        super(VolumeNotFoundException, self).__setattr__("name_or_id", name_or_id)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash(
            (
                self.message,
                self.name_or_id,
            )
        )

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        name_or_id = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    name_or_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
            name_or_id=name_or_id,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("VolumeNotFoundException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.name_or_id is not None:
            oprot.writeFieldBegin("name_or_id", TType.STRING, 2)
            oprot.writeString(
                self.name_or_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.name_or_id
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SnapshotNotFoundException(TException):
    """
    Attributes:
     - message
     - name_or_id

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
        name_or_id=None,
    ):
        super(SnapshotNotFoundException, self).__setattr__("message", message)
        super(SnapshotNotFoundException, self).__setattr__("name_or_id", name_or_id)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash(
            (
                self.message,
                self.name_or_id,
            )
        )

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        name_or_id = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    name_or_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
            name_or_id=name_or_id,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("SnapshotNotFoundException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.name_or_id is not None:
            oprot.writeFieldBegin("name_or_id", TType.STRING, 2)
            oprot.writeString(
                self.name_or_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.name_or_id
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ImageNotFoundException(TException):
    """
    Attributes:
     - message
     - name_or_id

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
        name_or_id=None,
    ):
        super(ImageNotFoundException, self).__setattr__("message", message)
        super(ImageNotFoundException, self).__setattr__("name_or_id", name_or_id)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash(
            (
                self.message,
                self.name_or_id,
            )
        )

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        name_or_id = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    name_or_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
            name_or_id=name_or_id,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("ImageNotFoundException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.name_or_id is not None:
            oprot.writeFieldBegin("name_or_id", TType.STRING, 2)
            oprot.writeString(
                self.name_or_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.name_or_id
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClusterNotFoundException(TException):
    """
    Attributes:
     - message
     - name_or_id

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
        name_or_id=None,
    ):
        super(ClusterNotFoundException, self).__setattr__("message", message)
        super(ClusterNotFoundException, self).__setattr__("name_or_id", name_or_id)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash(
            (
                self.message,
                self.name_or_id,
            )
        )

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        name_or_id = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    name_or_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
            name_or_id=name_or_id,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("ClusterNotFoundException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.name_or_id is not None:
            oprot.writeFieldBegin("name_or_id", TType.STRING, 2)
            oprot.writeString(
                self.name_or_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.name_or_id
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BackendNotFoundException(TException):
    """
    Attributes:
     - message
     - name_or_id

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
        name_or_id=None,
    ):
        super(BackendNotFoundException, self).__setattr__("message", message)
        super(BackendNotFoundException, self).__setattr__("name_or_id", name_or_id)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash(
            (
                self.message,
                self.name_or_id,
            )
        )

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        name_or_id = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    name_or_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
            name_or_id=name_or_id,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("BackendNotFoundException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.name_or_id is not None:
            oprot.writeFieldBegin("name_or_id", TType.STRING, 2)
            oprot.writeString(
                self.name_or_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.name_or_id
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PlaybookNotFoundException(TException):
    """
    Attributes:
     - message
     - name_or_id

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
        name_or_id=None,
    ):
        super(PlaybookNotFoundException, self).__setattr__("message", message)
        super(PlaybookNotFoundException, self).__setattr__("name_or_id", name_or_id)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash(
            (
                self.message,
                self.name_or_id,
            )
        )

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        name_or_id = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    name_or_id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
            name_or_id=name_or_id,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("PlaybookNotFoundException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.name_or_id is not None:
            oprot.writeFieldBegin("name_or_id", TType.STRING, 2)
            oprot.writeString(
                self.name_or_id.encode("utf-8")
                if sys.version_info[0] == 2
                else self.name_or_id
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DefaultException(TException):
    """
    Attributes:
     - message

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
    ):
        super(DefaultException, self).__setattr__("message", message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message,))

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("DefaultException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OpenStackConflictException(TException):
    """
    Conflict with request (e.g. while vm is in create image task)

    Attributes:
     - message

    """

    thrift_spec = None

    def __init__(
        self,
        message=None,
    ):
        super(OpenStackConflictException, self).__setattr__("message", message)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.message,))

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        message = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            message=message,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("OpenStackConflictException")
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 1)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(MetadataUser)
MetadataUser.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "user_id",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.LIST,
        "public_keys",
        (TType.STRING, "UTF8", False),
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "unix_name",
        "UTF8",
        None,
    ),  # 3
)
all_structs.append(MetadataUserData)
MetadataUserData.thrift_spec = (
    None,  # 0
    None,  # 1
    (
        2,
        TType.MAP,
        "data",
        (TType.STRING, "UTF8", TType.STRUCT, [MetadataUser, None], False),
        {},
    ),  # 2
)
all_structs.append(VirtualMachineServerMetadata)
VirtualMachineServerMetadata.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "ip",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "hashed_auth_token",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.STRUCT,
        "userdata",
        [MetadataUserData, None],
        None,
    ),  # 3
)
all_structs.append(Backend)
Backend.thrift_spec = (
    None,  # 0
    (
        1,
        TType.I64,
        "id",
        None,
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "owner",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "location_url",
        "UTF8",
        None,
    ),  # 3
    (
        4,
        TType.STRING,
        "template",
        "UTF8",
        None,
    ),  # 4
    (
        5,
        TType.STRING,
        "template_version",
        "UTF8",
        None,
    ),  # 5
)
all_structs.append(ResearchEnvironmentTemplate)
ResearchEnvironmentTemplate.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "template_name",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "title",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "description",
        "UTF8",
        None,
    ),  # 3
    (
        4,
        TType.STRING,
        "logo_url",
        "UTF8",
        None,
    ),  # 4
    (
        5,
        TType.STRING,
        "info_url",
        "UTF8",
        None,
    ),  # 5
    (
        6,
        TType.I32,
        "port",
        None,
        None,
    ),  # 6
    (
        7,
        TType.LIST,
        "incompatible_versions",
        (TType.STRING, "UTF8", False),
        None,
    ),  # 7
    (
        8,
        TType.BOOL,
        "is_maintained",
        None,
        None,
    ),  # 8
    (
        9,
        TType.MAP,
        "information_for_display",
        (TType.STRING, "UTF8", TType.STRING, "UTF8", False),
        None,
    ),  # 9
    (
        10,
        TType.I32,
        "min_ram",
        None,
        0,
    ),  # 10
    (
        11,
        TType.I32,
        "min_cores",
        None,
        0,
    ),  # 11
    (
        12,
        TType.STRING,
        "securitygroup_name",
        "UTF8",
        None,
    ),  # 12
)
all_structs.append(CondaPackage)
CondaPackage.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "build",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "build_number",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "name",
        "UTF8",
        None,
    ),  # 3
    (
        4,
        TType.STRING,
        "version",
        "UTF8",
        None,
    ),  # 4
    (
        5,
        TType.STRING,
        "home",
        "UTF8",
        None,
    ),  # 5
)
all_structs.append(Volume)
Volume.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "id",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "name",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "description",
        "UTF8",
        None,
    ),  # 3
    (
        4,
        TType.STRING,
        "status",
        "UTF8",
        None,
    ),  # 4
    (
        5,
        TType.STRING,
        "created_at",
        "UTF8",
        None,
    ),  # 5
    (
        6,
        TType.STRING,
        "device",
        "UTF8",
        None,
    ),  # 6
    (
        7,
        TType.I32,
        "size",
        None,
        None,
    ),  # 7
    (
        8,
        TType.STRING,
        "server_id",
        "UTF8",
        None,
    ),  # 8
)
all_structs.append(Snapshot)
Snapshot.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "id",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "name",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "description",
        "UTF8",
        None,
    ),  # 3
    (
        4,
        TType.STRING,
        "status",
        "UTF8",
        None,
    ),  # 4
    (
        5,
        TType.STRING,
        "created_at",
        "UTF8",
        None,
    ),  # 5
    (
        6,
        TType.I32,
        "size",
        None,
        None,
    ),  # 6
    (
        7,
        TType.STRING,
        "volume_id",
        "UTF8",
        None,
    ),  # 7
)
all_structs.append(Flavor)
Flavor.thrift_spec = (
    None,  # 0
    (
        1,
        TType.I32,
        "vcpus",
        None,
        None,
    ),  # 1
    (
        2,
        TType.I32,
        "ram",
        None,
        None,
    ),  # 2
    (
        3,
        TType.I32,
        "disk",
        None,
        None,
    ),  # 3
    (
        4,
        TType.STRING,
        "name",
        "UTF8",
        None,
    ),  # 4
    (
        5,
        TType.STRING,
        "description",
        "UTF8",
        None,
    ),  # 5
    (
        6,
        TType.I32,
        "ephemeral_disk",
        None,
        None,
    ),  # 6
)
all_structs.append(Image)
Image.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "name",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.I32,
        "min_disk",
        None,
        None,
    ),  # 2
    (
        3,
        TType.I32,
        "min_ram",
        None,
        None,
    ),  # 3
    (
        4,
        TType.STRING,
        "status",
        "UTF8",
        None,
    ),  # 4
    (
        5,
        TType.STRING,
        "created_at",
        "UTF8",
        None,
    ),  # 5
    (
        6,
        TType.STRING,
        "updated_at",
        "UTF8",
        None,
    ),  # 6
    (
        7,
        TType.STRING,
        "openstack_id",
        "UTF8",
        None,
    ),  # 7
    (
        8,
        TType.STRING,
        "description",
        "UTF8",
        None,
    ),  # 8
    (
        9,
        TType.LIST,
        "tags",
        (TType.STRING, "UTF8", False),
        None,
    ),  # 9
    (
        10,
        TType.BOOL,
        "is_snapshot",
        None,
        None,
    ),  # 10
    (
        11,
        TType.STRING,
        "os_version",
        "UTF8",
        None,
    ),  # 11
    (
        12,
        TType.STRING,
        "os_distro",
        "UTF8",
        None,
    ),  # 12
    (
        13,
        TType.STRING,
        "title",
        "UTF8",
        None,
    ),  # 13
    (
        14,
        TType.STRING,
        "slurm_version",
        "UTF8",
        None,
    ),  # 14
)
all_structs.append(VM)
VM.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRUCT,
        "flavor",
        [Flavor, None],
        None,
    ),  # 1
    (
        2,
        TType.STRUCT,
        "image",
        [Image, None],
        None,
    ),  # 2
    (
        3,
        TType.MAP,
        "metadata",
        (TType.STRING, "UTF8", TType.STRING, "UTF8", False),
        None,
    ),  # 3
    (
        4,
        TType.STRING,
        "project_id",
        "UTF8",
        None,
    ),  # 4
    (
        5,
        TType.STRING,
        "keyname",
        "UTF8",
        None,
    ),  # 5
    (
        6,
        TType.STRING,
        "openstack_id",
        "UTF8",
        None,
    ),  # 6
    (
        7,
        TType.STRING,
        "name",
        "UTF8",
        None,
    ),  # 7
    (
        8,
        TType.STRING,
        "created_at",
        "UTF8",
        None,
    ),  # 8
    (
        9,
        TType.STRING,
        "floating_ip",
        "UTF8",
        None,
    ),  # 9
    (
        10,
        TType.STRING,
        "fixed_ip",
        "UTF8",
        None,
    ),  # 10
    (
        11,
        TType.STRING,
        "task_state",
        "UTF8",
        None,
    ),  # 11
    (
        12,
        TType.STRING,
        "vm_state",
        "UTF8",
        None,
    ),  # 12
)
all_structs.append(ClusterInstanceMetadata)
ClusterInstanceMetadata.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "user_id",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "project_id",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "project_name",
        "UTF8",
        None,
    ),  # 3
)
all_structs.append(ClusterInstance)
ClusterInstance.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "type",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "image",
        "UTF8",
        None,
    ),  # 2
)
all_structs.append(ClusterVolume)
ClusterVolume.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "openstack_id",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.BOOL,
        "permanent",
        None,
        None,
    ),  # 2
    (
        3,
        TType.BOOL,
        "exists",
        None,
        None,
    ),  # 3
    (
        4,
        TType.I32,
        "size",
        None,
        None,
    ),  # 4
    (
        5,
        TType.STRING,
        "type",
        "UTF8",
        "ext4",
    ),  # 5
)
all_structs.append(ClusterWorker)
ClusterWorker.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "type",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "image",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.I32,
        "count",
        None,
        None,
    ),  # 3
    (
        4,
        TType.BOOL,
        "onDemand",
        None,
        False,
    ),  # 4
)
all_structs.append(ClusterMessage)
ClusterMessage.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "cluster_id",
        "UTF8",
        None,
    ),  # 2
)
all_structs.append(ClusterInfo)
ClusterInfo.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "cluster_id",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.BOOL,
        "ready",
        None,
        None,
    ),  # 3
)
all_structs.append(ClusterState)
ClusterState.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "cluster_id",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "state",
        "UTF8",
        None,
    ),  # 3
    (
        4,
        TType.STRING,
        "ssh_user",
        "UTF8",
        None,
    ),  # 4
    (
        5,
        TType.STRING,
        "floating_ip",
        "UTF8",
        None,
    ),  # 5
    (
        6,
        TType.STRING,
        "last_changed",
        "UTF8",
        None,
    ),  # 6
)
all_structs.append(ClusterLog)
ClusterLog.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "cluster_id",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "log",
        "UTF8",
        None,
    ),  # 3
)
all_structs.append(PlaybookResult)
PlaybookResult.thrift_spec = (
    None,  # 0
    (
        1,
        TType.I32,
        "status",
        None,
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "stdout",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "stderr",
        "UTF8",
        None,
    ),  # 3
)
all_structs.append(MetadataServerNotAvailableException)
MetadataServerNotAvailableException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
)
all_structs.append(MetadataServerNotAllowedException)
MetadataServerNotAllowedException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
)
all_structs.append(ResourceNotFoundException)
ResourceNotFoundException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "resource_type",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "name_or_id",
        "UTF8",
        None,
    ),  # 3
)
all_structs.append(ResourceNotAvailableException)
ResourceNotAvailableException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
)
all_structs.append(TemplateNotFoundException)
TemplateNotFoundException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "template",
        "UTF8",
        None,
    ),  # 2
)
all_structs.append(NameAlreadyUsedException)
NameAlreadyUsedException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "name",
        "UTF8",
        None,
    ),  # 2
)
all_structs.append(ServerNotFoundException)
ServerNotFoundException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "name_or_id",
        "UTF8",
        None,
    ),  # 2
)
all_structs.append(SecurityGroupNotFoundException)
SecurityGroupNotFoundException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "name_or_id",
        "UTF8",
        None,
    ),  # 2
)
all_structs.append(SecurityGroupRuleNotFoundException)
SecurityGroupRuleNotFoundException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "name_or_id",
        "UTF8",
        None,
    ),  # 2
)
all_structs.append(FlavorNotFoundException)
FlavorNotFoundException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "name_or_id",
        "UTF8",
        None,
    ),  # 2
)
all_structs.append(VolumeNotFoundException)
VolumeNotFoundException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "name_or_id",
        "UTF8",
        None,
    ),  # 2
)
all_structs.append(SnapshotNotFoundException)
SnapshotNotFoundException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "name_or_id",
        "UTF8",
        None,
    ),  # 2
)
all_structs.append(ImageNotFoundException)
ImageNotFoundException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "name_or_id",
        "UTF8",
        None,
    ),  # 2
)
all_structs.append(ClusterNotFoundException)
ClusterNotFoundException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "name_or_id",
        "UTF8",
        None,
    ),  # 2
)
all_structs.append(BackendNotFoundException)
BackendNotFoundException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "name_or_id",
        "UTF8",
        None,
    ),  # 2
)
all_structs.append(PlaybookNotFoundException)
PlaybookNotFoundException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "name_or_id",
        "UTF8",
        None,
    ),  # 2
)
all_structs.append(DefaultException)
DefaultException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
)
all_structs.append(OpenStackConflictException)
OpenStackConflictException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 1
)
fix_spec(all_structs)
del all_structs
