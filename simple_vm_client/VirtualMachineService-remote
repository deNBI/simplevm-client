#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.20.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from VirtualMachineService import VirtualMachineService
from VirtualMachineService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  bool is_version(double version)')
    print('  string get_client_version()')
    print('   get_gateway_ip()')
    print('   get_calculation_values()')
    print('  string import_keypair(string keyname, string public_key)')
    print('   get_vm_ports(string openstack_id)')
    print('  void add_udp_security_group(string server_id)')
    print('  void add_research_environment_security_group(string server_id, string security_group_name)')
    print('  void add_project_security_group_to_server(string server_id, string project_name, string project_id)')
    print('  void add_metadata_to_server(string openstack_id,  metadata)')
    print('   get_flavors()')
    print('   get_images()')
    print('   get_public_images()')
    print('   get_private_images()')
    print('  Image get_image(string openstack_id, bool ignore_not_active)')
    print('  Volume get_volume(string volume_id)')
    print('   get_volumes_by_ids( volume_ids)')
    print('  void resize_volume(string volume_id, int size)')
    print('  string open_port_range_for_vm_in_project(int range_start, int range_stop, string openstack_id, string ethertype, string protocol)')
    print('  void delete_security_group_rule(string openstack_id)')
    print('  void delete_server_security_groups(string openstack_id)')
    print('  void delete_server(string openstack_id)')
    print('  void rescue_server(string openstack_id, string admin_pass, string image_ref)')
    print('  void unrescue_server(string openstack_id)')
    print('  string start_server(string flavor_name, string image_name, string public_key, string servername,  metadata,  volume_ids_path_new,  volume_ids_path_attach,  additional_keys, string research_environment,  additional_security_group_ids, string slurm_version, string metadata_token, string metadata_endpoint)')
    print('  bool is_bibigrid_available()')
    print('  void detach_ip_from_server(string server_id, string floating_ip)')
    print('  string start_server_with_custom_key(string flavor_name, string image_name, string servername,  metadata, string research_environment,  volume_ids_path_new,  volume_ids_path_attach,  additional_security_group_ids,  additional_keys, string metadata_token, string metadata_endpoint)')
    print('  bool exist_server(string name)')
    print('  int create_and_deploy_playbook(string public_key, string openstack_id,  conda_packages, string research_environment_template,  apt_packages, bool create_only_backend, string base_url)')
    print('  PlaybookResult get_playbook_logs(string openstack_id)')
    print('  bool has_forc()')
    print('  string get_forc_access_url()')
    print('  Backend create_backend(string owner, string user_path, string template, string upstream_url)')
    print('   get_backends()')
    print('   get_backends_by_owner(string owner)')
    print('   get_backends_by_template(string template)')
    print('  Backend get_backend_by_id(i64 id)')
    print('  void set_metadata_server_data(string ip, VirtualMachineServerMetadata metadata)')
    print('  void remove_metadata_server_data(string ip)')
    print('  void is_metadata_server_available()')
    print('  void delete_backend(i64 id)')
    print('   add_user_to_backend(i64 backend_id, string user_id)')
    print('   get_users_from_backend(i64 backend_id)')
    print('   delete_user_from_backend(i64 backend_id, string user_id)')
    print('   get_allowed_templates()')
    print('   get_servers()')
    print('   get_servers_by_ids( server_ids)')
    print('   get_servers_by_bibigrid_id(string bibigrid_id)')
    print('  string get_security_group_id_by_name(string name)')
    print('   scale_up_cluster(string cluster_id, string image_name, string flavor_name, int count,  names, int start_idx, int batch_idx)')
    print('  string add_cluster_machine(string cluster_id, string cluster_user, string cluster_group_id, string image_name, string flavor_name, string name, string key_name, int batch_idx, int worker_idx)')
    print('  ClusterInfo get_cluster_info(string cluster_id)')
    print('   get_cluster_status(string cluster_id)')
    print('  string get_keypair_public_key_by_name(string key_name)')
    print('  void delete_keypair(string key_name)')
    print('  void add_default_security_groups_to_server(string openstack_id)')
    print('  VM get_server(string openstack_id, bool no_connection)')
    print('  VM get_server_by_unique_name(string unique_name, bool no_connection)')
    print('  void stop_server(string openstack_id)')
    print('  string create_snapshot(string openstack_id, string name, string username,  base_tags, string description)')
    print('   get_limits()')
    print('   start_cluster( public_keys, ClusterInstance master_instance,  worker_instances, string user)')
    print('   terminate_cluster(string cluster_id)')
    print('  void delete_image(string image_id)')
    print('  void detach_volume(string volume_id, string server_id)')
    print('  void delete_volume(string volume_id)')
    print('   attach_volume_to_server(string openstack_id, string volume_id)')
    print('  void resume_server(string openstack_id)')
    print('  Volume create_volume(string volume_name, int volume_storage,  metadata)')
    print('  Volume create_volume_by_source_volume(string volume_name,  metadata, string source_volume_id)')
    print('  Volume create_volume_by_volume_snap(string volume_name,  metadata, string volume_snap_id)')
    print('  string create_volume_snapshot(string volume_id, string name, string description)')
    print('  Snapshot get_volume_snapshot(string name_or_id)')
    print('  void delete_volume_snapshot(string snapshot_id)')
    print('  void reboot_hard_server(string openstack_id)')
    print('  void reboot_soft_server(string openstack_id)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = VirtualMachineService.Client(protocol)
transport.open()

if cmd == 'is_version':
    if len(args) != 1:
        print('is_version requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_version(eval(args[0]),))

elif cmd == 'get_client_version':
    if len(args) != 0:
        print('get_client_version requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_client_version())

elif cmd == 'get_gateway_ip':
    if len(args) != 0:
        print('get_gateway_ip requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_gateway_ip())

elif cmd == 'get_calculation_values':
    if len(args) != 0:
        print('get_calculation_values requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_calculation_values())

elif cmd == 'import_keypair':
    if len(args) != 2:
        print('import_keypair requires 2 args')
        sys.exit(1)
    pp.pprint(client.import_keypair(args[0], args[1],))

elif cmd == 'get_vm_ports':
    if len(args) != 1:
        print('get_vm_ports requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_vm_ports(args[0],))

elif cmd == 'add_udp_security_group':
    if len(args) != 1:
        print('add_udp_security_group requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_udp_security_group(args[0],))

elif cmd == 'add_research_environment_security_group':
    if len(args) != 2:
        print('add_research_environment_security_group requires 2 args')
        sys.exit(1)
    pp.pprint(client.add_research_environment_security_group(args[0], args[1],))

elif cmd == 'add_project_security_group_to_server':
    if len(args) != 3:
        print('add_project_security_group_to_server requires 3 args')
        sys.exit(1)
    pp.pprint(client.add_project_security_group_to_server(args[0], args[1], args[2],))

elif cmd == 'add_metadata_to_server':
    if len(args) != 2:
        print('add_metadata_to_server requires 2 args')
        sys.exit(1)
    pp.pprint(client.add_metadata_to_server(args[0], eval(args[1]),))

elif cmd == 'get_flavors':
    if len(args) != 0:
        print('get_flavors requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_flavors())

elif cmd == 'get_images':
    if len(args) != 0:
        print('get_images requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_images())

elif cmd == 'get_public_images':
    if len(args) != 0:
        print('get_public_images requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_public_images())

elif cmd == 'get_private_images':
    if len(args) != 0:
        print('get_private_images requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_private_images())

elif cmd == 'get_image':
    if len(args) != 2:
        print('get_image requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_image(args[0], eval(args[1]),))

elif cmd == 'get_volume':
    if len(args) != 1:
        print('get_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_volume(args[0],))

elif cmd == 'get_volumes_by_ids':
    if len(args) != 1:
        print('get_volumes_by_ids requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_volumes_by_ids(eval(args[0]),))

elif cmd == 'resize_volume':
    if len(args) != 2:
        print('resize_volume requires 2 args')
        sys.exit(1)
    pp.pprint(client.resize_volume(args[0], eval(args[1]),))

elif cmd == 'open_port_range_for_vm_in_project':
    if len(args) != 5:
        print('open_port_range_for_vm_in_project requires 5 args')
        sys.exit(1)
    pp.pprint(client.open_port_range_for_vm_in_project(eval(args[0]), eval(args[1]), args[2], args[3], args[4],))

elif cmd == 'delete_security_group_rule':
    if len(args) != 1:
        print('delete_security_group_rule requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_security_group_rule(args[0],))

elif cmd == 'delete_server_security_groups':
    if len(args) != 1:
        print('delete_server_security_groups requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_server_security_groups(args[0],))

elif cmd == 'delete_server':
    if len(args) != 1:
        print('delete_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_server(args[0],))

elif cmd == 'rescue_server':
    if len(args) != 3:
        print('rescue_server requires 3 args')
        sys.exit(1)
    pp.pprint(client.rescue_server(args[0], args[1], args[2],))

elif cmd == 'unrescue_server':
    if len(args) != 1:
        print('unrescue_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.unrescue_server(args[0],))

elif cmd == 'start_server':
    if len(args) != 13:
        print('start_server requires 13 args')
        sys.exit(1)
    pp.pprint(client.start_server(args[0], args[1], args[2], args[3], eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]), args[8], eval(args[9]), args[10], args[11], args[12],))

elif cmd == 'is_bibigrid_available':
    if len(args) != 0:
        print('is_bibigrid_available requires 0 args')
        sys.exit(1)
    pp.pprint(client.is_bibigrid_available())

elif cmd == 'detach_ip_from_server':
    if len(args) != 2:
        print('detach_ip_from_server requires 2 args')
        sys.exit(1)
    pp.pprint(client.detach_ip_from_server(args[0], args[1],))

elif cmd == 'start_server_with_custom_key':
    if len(args) != 11:
        print('start_server_with_custom_key requires 11 args')
        sys.exit(1)
    pp.pprint(client.start_server_with_custom_key(args[0], args[1], args[2], eval(args[3]), args[4], eval(args[5]), eval(args[6]), eval(args[7]), eval(args[8]), args[9], args[10],))

elif cmd == 'exist_server':
    if len(args) != 1:
        print('exist_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.exist_server(args[0],))

elif cmd == 'create_and_deploy_playbook':
    if len(args) != 7:
        print('create_and_deploy_playbook requires 7 args')
        sys.exit(1)
    pp.pprint(client.create_and_deploy_playbook(args[0], args[1], eval(args[2]), args[3], eval(args[4]), eval(args[5]), args[6],))

elif cmd == 'get_playbook_logs':
    if len(args) != 1:
        print('get_playbook_logs requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_playbook_logs(args[0],))

elif cmd == 'has_forc':
    if len(args) != 0:
        print('has_forc requires 0 args')
        sys.exit(1)
    pp.pprint(client.has_forc())

elif cmd == 'get_forc_access_url':
    if len(args) != 0:
        print('get_forc_access_url requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_forc_access_url())

elif cmd == 'create_backend':
    if len(args) != 4:
        print('create_backend requires 4 args')
        sys.exit(1)
    pp.pprint(client.create_backend(args[0], args[1], args[2], args[3],))

elif cmd == 'get_backends':
    if len(args) != 0:
        print('get_backends requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_backends())

elif cmd == 'get_backends_by_owner':
    if len(args) != 1:
        print('get_backends_by_owner requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_backends_by_owner(args[0],))

elif cmd == 'get_backends_by_template':
    if len(args) != 1:
        print('get_backends_by_template requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_backends_by_template(args[0],))

elif cmd == 'get_backend_by_id':
    if len(args) != 1:
        print('get_backend_by_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_backend_by_id(eval(args[0]),))

elif cmd == 'set_metadata_server_data':
    if len(args) != 2:
        print('set_metadata_server_data requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_metadata_server_data(args[0], eval(args[1]),))

elif cmd == 'remove_metadata_server_data':
    if len(args) != 1:
        print('remove_metadata_server_data requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove_metadata_server_data(args[0],))

elif cmd == 'is_metadata_server_available':
    if len(args) != 0:
        print('is_metadata_server_available requires 0 args')
        sys.exit(1)
    pp.pprint(client.is_metadata_server_available())

elif cmd == 'delete_backend':
    if len(args) != 1:
        print('delete_backend requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_backend(eval(args[0]),))

elif cmd == 'add_user_to_backend':
    if len(args) != 2:
        print('add_user_to_backend requires 2 args')
        sys.exit(1)
    pp.pprint(client.add_user_to_backend(eval(args[0]), args[1],))

elif cmd == 'get_users_from_backend':
    if len(args) != 1:
        print('get_users_from_backend requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_users_from_backend(eval(args[0]),))

elif cmd == 'delete_user_from_backend':
    if len(args) != 2:
        print('delete_user_from_backend requires 2 args')
        sys.exit(1)
    pp.pprint(client.delete_user_from_backend(eval(args[0]), args[1],))

elif cmd == 'get_allowed_templates':
    if len(args) != 0:
        print('get_allowed_templates requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_allowed_templates())

elif cmd == 'get_servers':
    if len(args) != 0:
        print('get_servers requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_servers())

elif cmd == 'get_servers_by_ids':
    if len(args) != 1:
        print('get_servers_by_ids requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_servers_by_ids(eval(args[0]),))

elif cmd == 'get_servers_by_bibigrid_id':
    if len(args) != 1:
        print('get_servers_by_bibigrid_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_servers_by_bibigrid_id(args[0],))

elif cmd == 'get_security_group_id_by_name':
    if len(args) != 1:
        print('get_security_group_id_by_name requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_security_group_id_by_name(args[0],))

elif cmd == 'scale_up_cluster':
    if len(args) != 7:
        print('scale_up_cluster requires 7 args')
        sys.exit(1)
    pp.pprint(client.scale_up_cluster(args[0], args[1], args[2], eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'add_cluster_machine':
    if len(args) != 9:
        print('add_cluster_machine requires 9 args')
        sys.exit(1)
    pp.pprint(client.add_cluster_machine(args[0], args[1], args[2], args[3], args[4], args[5], args[6], eval(args[7]), eval(args[8]),))

elif cmd == 'get_cluster_info':
    if len(args) != 1:
        print('get_cluster_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_cluster_info(args[0],))

elif cmd == 'get_cluster_status':
    if len(args) != 1:
        print('get_cluster_status requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_cluster_status(args[0],))

elif cmd == 'get_keypair_public_key_by_name':
    if len(args) != 1:
        print('get_keypair_public_key_by_name requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_keypair_public_key_by_name(args[0],))

elif cmd == 'delete_keypair':
    if len(args) != 1:
        print('delete_keypair requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_keypair(args[0],))

elif cmd == 'add_default_security_groups_to_server':
    if len(args) != 1:
        print('add_default_security_groups_to_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_default_security_groups_to_server(args[0],))

elif cmd == 'get_server':
    if len(args) != 2:
        print('get_server requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_server(args[0], eval(args[1]),))

elif cmd == 'get_server_by_unique_name':
    if len(args) != 2:
        print('get_server_by_unique_name requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_server_by_unique_name(args[0], eval(args[1]),))

elif cmd == 'stop_server':
    if len(args) != 1:
        print('stop_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.stop_server(args[0],))

elif cmd == 'create_snapshot':
    if len(args) != 5:
        print('create_snapshot requires 5 args')
        sys.exit(1)
    pp.pprint(client.create_snapshot(args[0], args[1], args[2], eval(args[3]), args[4],))

elif cmd == 'get_limits':
    if len(args) != 0:
        print('get_limits requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_limits())

elif cmd == 'start_cluster':
    if len(args) != 4:
        print('start_cluster requires 4 args')
        sys.exit(1)
    pp.pprint(client.start_cluster(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'terminate_cluster':
    if len(args) != 1:
        print('terminate_cluster requires 1 args')
        sys.exit(1)
    pp.pprint(client.terminate_cluster(args[0],))

elif cmd == 'delete_image':
    if len(args) != 1:
        print('delete_image requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_image(args[0],))

elif cmd == 'detach_volume':
    if len(args) != 2:
        print('detach_volume requires 2 args')
        sys.exit(1)
    pp.pprint(client.detach_volume(args[0], args[1],))

elif cmd == 'delete_volume':
    if len(args) != 1:
        print('delete_volume requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_volume(args[0],))

elif cmd == 'attach_volume_to_server':
    if len(args) != 2:
        print('attach_volume_to_server requires 2 args')
        sys.exit(1)
    pp.pprint(client.attach_volume_to_server(args[0], args[1],))

elif cmd == 'resume_server':
    if len(args) != 1:
        print('resume_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.resume_server(args[0],))

elif cmd == 'create_volume':
    if len(args) != 3:
        print('create_volume requires 3 args')
        sys.exit(1)
    pp.pprint(client.create_volume(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'create_volume_by_source_volume':
    if len(args) != 3:
        print('create_volume_by_source_volume requires 3 args')
        sys.exit(1)
    pp.pprint(client.create_volume_by_source_volume(args[0], eval(args[1]), args[2],))

elif cmd == 'create_volume_by_volume_snap':
    if len(args) != 3:
        print('create_volume_by_volume_snap requires 3 args')
        sys.exit(1)
    pp.pprint(client.create_volume_by_volume_snap(args[0], eval(args[1]), args[2],))

elif cmd == 'create_volume_snapshot':
    if len(args) != 3:
        print('create_volume_snapshot requires 3 args')
        sys.exit(1)
    pp.pprint(client.create_volume_snapshot(args[0], args[1], args[2],))

elif cmd == 'get_volume_snapshot':
    if len(args) != 1:
        print('get_volume_snapshot requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_volume_snapshot(args[0],))

elif cmd == 'delete_volume_snapshot':
    if len(args) != 1:
        print('delete_volume_snapshot requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_volume_snapshot(args[0],))

elif cmd == 'reboot_hard_server':
    if len(args) != 1:
        print('reboot_hard_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.reboot_hard_server(args[0],))

elif cmd == 'reboot_soft_server':
    if len(args) != 1:
        print('reboot_soft_server requires 1 args')
        sys.exit(1)
    pp.pprint(client.reboot_soft_server(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
